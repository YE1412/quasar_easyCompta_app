import { aH as defineStore } from "./index.js";
import { b as userAxiosService } from "./use-quasar.js";
import { i as invoiceAxiosService } from "./invoice.service.js";
import { o as orderAxiosService, a as actorAxiosService, s as serviceAxiosService } from "./service.service.js";
const useCounterStore = defineStore("counter", {
  state: () => ({
    count: 0,
    prices: [],
    htFYI: 0,
    ttFYI: 0,
    invoicesFY: [],
    nbInvoices: 0,
    nbOrders: 0,
    nbActors: 0,
    nbServices: 0
  }),
  getters: {
    doubleCount: (state) => state.count * 2,
    getPrices(state) {
      return state.prices;
    },
    getEuroPrice(state) {
      return state.prices.find((p) => {
        return p.euro === 1;
      });
    },
    getDollarPrice(state) {
      return state.prices.find((p) => {
        return p.dollar === 1;
      });
    },
    getLivrePrice(state) {
      return state.prices.find((p) => {
        return p.livre === 1;
      });
    },
    getHtFYI(state) {
      return state.htFYI;
    },
    getTtFYI(state) {
      return state.ttFYI;
    },
    getInvoicesFY(state) {
      return state.invoicesFY;
    },
    getNbInvoices(state) {
      return state.nbInvoices;
    },
    getNbOrders(state) {
      return state.nbOrders;
    },
    getNbActors(state) {
      return state.nbActors;
    },
    getNbServices(state) {
      return state.nbServices;
    }
  },
  actions: {
    increment() {
      this.count++;
    },
    showRouter() {
      console.log(this.router);
    },
    showStorage() {
      console.log(this);
    },
    getAllPrices() {
      return new Promise((resolve, reject) => {
        userAxiosService.getAllPrices().then((res) => {
          if (res.data.length) {
            this.prices = res.data;
            resolve(res.data);
          } else {
            reject(false);
          }
        }).catch((err) => {
          if (err.response) {
            console.log(err.response.data);
            console.log(err.response.status);
            console.log(err.response.headers);
          } else if (err.request) {
            console.log(err.request);
          } else {
            console.log("Error", err.message);
          }
          console.log(err.config);
          reject(new Error(err));
        });
      });
    },
    getFinancialYearInvoices(adminId) {
      return new Promise((resolve, reject) => {
        invoiceAxiosService.getFinancialYearInvoices(adminId).then(async (res) => {
          if (res.data.length) {
            const dataClear = res.data;
            this.invoicesFY = dataClear;
            resolve(dataClear);
          } else {
            resolve(false);
          }
        }).catch((err) => {
          if (err.response) {
            console.log(err.response.data);
            console.log(err.response.status);
            console.log(err.response.headers);
          } else if (err.request) {
            console.log(err.request);
          } else {
            console.log("Error", err.message);
          }
          console.log(err.config);
          reject(new Error(err));
        });
      });
    },
    getFinancialYearNbInvoices(adminId) {
      return new Promise((resolve, reject) => {
        invoiceAxiosService.getFinancialYearNbInvoices(adminId).then(async (res) => {
          if (res.data.length) {
            this.nbInvoices = res.data[0].n_inv;
            resolve(res.data);
          } else {
            resolve(false);
          }
        }).catch((err) => {
          if (err.response) {
            console.log(err.response.data);
            console.log(err.response.status);
            console.log(err.response.headers);
          } else if (err.request) {
            console.log(err.request);
          } else {
            console.log("Error", err.message);
          }
          console.log(err.config);
          reject(new Error(err));
        });
      });
    },
    getNbOrdersFromDb() {
      return new Promise((resolve, reject) => {
        orderAxiosService.getNbOrders().then(async (res) => {
          if (res.data.length) {
            this.nbOrders = res.data[0].n_ord;
            resolve(res.data);
          } else {
            resolve(false);
          }
        }).catch((err) => {
          if (err.response) {
            console.log(err.response.data);
            console.log(err.response.status);
            console.log(err.response.headers);
          } else if (err.request) {
            console.log(err.request);
          } else {
            console.log("Error", err.message);
          }
          console.log(err.config);
          reject(new Error(err));
        });
      });
    },
    getNbActorsFromDb() {
      return new Promise((resolve, reject) => {
        actorAxiosService.getNbActors().then(async (res) => {
          if (res.data.length) {
            this.nbActors = res.data[0].n_act;
            resolve(res.data);
          } else {
            resolve(false);
          }
        }).catch((err) => {
          if (err.response) {
            console.log(err.response.data);
            console.log(err.response.status);
            console.log(err.response.headers);
          } else if (err.request) {
            console.log(err.request);
          } else {
            console.log("Error", err.message);
          }
          console.log(err.config);
          reject(new Error(err));
        });
      });
    },
    getNbServicesFromDb() {
      return new Promise((resolve, reject) => {
        serviceAxiosService.getNbServices().then(async (res) => {
          if (res.data.length) {
            this.nbServices = res.data[0].n_srv;
            resolve(res.data);
          } else {
            resolve(false);
          }
        }).catch((err) => {
          if (err.response) {
            console.log(err.response.data);
            console.log(err.response.status);
            console.log(err.response.headers);
          } else if (err.request) {
            console.log(err.request);
          } else {
            console.log("Error", err.message);
          }
          console.log(err.config);
          reject(new Error(err));
        });
      });
    }
  }
});
export { useCounterStore as u };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
