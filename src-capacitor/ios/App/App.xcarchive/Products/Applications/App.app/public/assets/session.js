import { aH as defineStore, aI as cookieStorage, aJ as extend } from "./index.js";
import { s as sessionAxiosService } from "./session.service.js";
const useSessionStore = defineStore("session", {
  state: () => ({
    sessionId: "",
    languages: [],
    langDisplayed: null
  }),
  persist: {
    storage: cookieStorage,
    debug: true
  },
  getters: {
    getSessionId(state) {
      return state.sessionId;
    },
    getLanguages(state) {
      return state.languages;
    },
    getLangDisplayed(state) {
      return state.langDisplayed;
    }
  },
  actions: {
    setSessionId(id) {
      const copyOfData = id;
      this.sessionId = copyOfData;
    },
    setLanguages(languages) {
      const copyOfData = extend(true, [], languages);
      this.languages = copyOfData;
    },
    setLangDisplayed(lang) {
      const copyOfData = extend(true, {}, lang);
      this.langDisplayed = copyOfData;
    },
    removeSessionId() {
      this.sessionId = "";
    },
    removeLanguages() {
      this.languages = [];
    },
    removeLangDisplayed() {
      this.langDisplayed = {};
    },
    removeAll() {
      this.sessionId = "";
      this.languages = [];
      this.langDisplayed = {};
    },
    getSession() {
      return new Promise((resolve, reject) => {
        sessionAxiosService.get().then((res) => {
          if (res.data.id) {
            this.setSessionId(res.data.id);
            resolve(res.data.id);
          } else {
            reject(false);
          }
        }).catch((err) => {
          if (err.response) {
            console.log(err.response.data);
            console.log(err.response.status);
            console.log(err.response.headers);
          } else if (err.request) {
            console.log(err.request);
          } else {
            console.log("Error", err.message);
          }
          console.log(err.config);
          reject(new Error(err));
        });
      });
    },
    getLanguagesFromDB() {
      return new Promise((resolve, reject) => {
        sessionAxiosService.getLanguages().then((res) => {
          if (res.data.length) {
            this.setLanguages(res.data);
            resolve(res.data);
          } else {
            reject(false);
          }
        }).catch((err) => {
          if (err.response) {
            console.log(err.response.data);
            console.log(err.response.status);
            console.log(err.response.headers);
          } else if (err.request) {
            console.log(err.request);
          } else {
            console.log("Error", err.message);
          }
          console.log(err.config);
          reject(new Error(err));
        });
      });
    },
    validateSession() {
      return new Promise((resolve, reject) => {
        var _a;
        console.log("Validate session Id");
        console.log(this.sessionId);
        sessionAxiosService.validate((_a = this.sessionId) != null ? _a : "").then(() => {
          resolve(true);
        }).catch((err) => {
          reject(new Error(err));
        });
      });
    },
    deleteSession() {
      this.removeSessionId();
      return sessionAxiosService.delete().then((res) => {
        return res;
      }).catch((err) => {
        return new Error(err);
      });
    }
  }
});
export { useSessionStore as u };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
