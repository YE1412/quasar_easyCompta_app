import { aH as defineStore } from "./index.js";
import { i as invoiceAxiosService } from "./invoice.service.js";
import { s as setDecryptApi, _ as __TRANSFORMOBJ__ } from "./use-quasar.js";
const useInvoiceStore = defineStore("invoice", {
  state: () => ({
    invoices: [],
    languages: [],
    devises: [],
    sellers: [],
    buyers: [],
    payments: [],
    orders: []
  }),
  getters: {
    getInvoices(state) {
      return state.invoices;
    },
    getLanguages(state) {
      return state.languages;
    },
    getDevises(state) {
      return state.devises;
    },
    getSellers(state) {
      return state.sellers;
    },
    getBuyers(state) {
      return state.buyers;
    },
    getPayments(state) {
      return state.payments;
    },
    getOrders(state) {
      return state.orders;
    }
  },
  actions: {
    getAllInvoices(userId) {
      return new Promise((resolve, reject) => {
        invoiceAxiosService.getAll(userId).then(async (res) => {
          if (res.data.length) {
            await setDecryptApi();
            const dataClear = await __TRANSFORMOBJ__(res.data);
            this.invoices = dataClear;
            resolve(dataClear);
          } else {
            reject(false);
          }
        }).catch((err) => {
          if (err.response) {
            console.log(err.response.data);
            console.log(err.response.status);
            console.log(err.response.headers);
          } else if (err.request) {
            console.log(err.request);
          } else {
            console.log("Error", err.message);
          }
          console.log(err.config);
          reject(new Error(err));
        });
      });
    },
    getMoreInvoices(ids) {
      return new Promise((resolve, reject) => {
        invoiceAxiosService.getMore(ids).then(async (res) => {
          if (res.data.length) {
            await setDecryptApi();
            const dataClear = await __TRANSFORMOBJ__(res.data);
            this.invoices = dataClear;
            resolve(dataClear);
          } else {
            reject(false);
          }
        }).catch((err) => {
          if (err.response) {
            console.log(err.response.data);
            console.log(err.response.status);
            console.log(err.response.headers);
          } else if (err.request) {
            console.log(err.request);
          } else {
            console.log("Error", err.message);
          }
          console.log(err.config);
          reject(new Error(err));
        });
      });
    },
    getAllLanguages() {
      return new Promise((resolve, reject) => {
        invoiceAxiosService.getAllLanguages().then(async (res) => {
          if (res.data.length) {
            this.languages = res.data;
            resolve(res.data);
          } else {
            reject(false);
          }
        }).catch((err) => {
          if (err.response) {
            console.log(err.response.data);
            console.log(err.response.status);
            console.log(err.response.headers);
          } else if (err.request) {
            console.log(err.request);
          } else {
            console.log("Error", err.message);
          }
          console.log(err.config);
          reject(new Error(err));
        });
      });
    },
    getAllDevises() {
      return new Promise((resolve, reject) => {
        invoiceAxiosService.getAllDevises().then(async (res) => {
          if (res.data.length) {
            this.devises = res.data;
            resolve(res.data);
          } else {
            reject(false);
          }
        }).catch((err) => {
          if (err.response) {
            console.log(err.response.data);
            console.log(err.response.status);
            console.log(err.response.headers);
          } else if (err.request) {
            console.log(err.request);
          } else {
            console.log("Error", err.message);
          }
          console.log(err.config);
          reject(new Error(err));
        });
      });
    },
    getAllOrders() {
      return new Promise((resolve, reject) => {
        invoiceAxiosService.getAllOrders().then(async (res) => {
          if (res.data.length) {
            await setDecryptApi();
            const dataClear = await __TRANSFORMOBJ__(res.data);
            this.orders = dataClear;
            resolve(dataClear);
          } else {
            reject(false);
          }
        }).catch((err) => {
          if (err.response) {
            console.log(err.response.data);
            console.log(err.response.status);
            console.log(err.response.headers);
          } else if (err.request) {
            console.log(err.request);
          } else {
            console.log("Error", err.message);
          }
          console.log(err.config);
          reject(new Error(err));
        });
      });
    },
    getAllSellers() {
      return new Promise((resolve, reject) => {
        invoiceAxiosService.getAllSellers().then(async (res) => {
          if (res.data.length) {
            await setDecryptApi();
            const dataClear = await __TRANSFORMOBJ__(res.data);
            this.sellers = dataClear;
            resolve(dataClear);
          } else {
            reject(false);
          }
        }).catch((err) => {
          if (err.response) {
            console.log(err.response.data);
            console.log(err.response.status);
            console.log(err.response.headers);
          } else if (err.request) {
            console.log(err.request);
          } else {
            console.log("Error", err.message);
          }
          console.log(err.config);
          reject(new Error(err));
        });
      });
    },
    getAllBuyers() {
      return new Promise((resolve, reject) => {
        invoiceAxiosService.getAllBuyers().then(async (res) => {
          if (res.data.length) {
            await setDecryptApi();
            const dataClear = await __TRANSFORMOBJ__(res.data);
            this.buyers = dataClear;
            resolve(dataClear);
          } else {
            reject(false);
          }
        }).catch((err) => {
          if (err.response) {
            console.log(err.response.data);
            console.log(err.response.status);
            console.log(err.response.headers);
          } else if (err.request) {
            console.log(err.request);
          } else {
            console.log("Error", err.message);
          }
          console.log(err.config);
          reject(new Error(err));
        });
      });
    },
    getAllPayments() {
      return new Promise((resolve, reject) => {
        invoiceAxiosService.getAllPayments().then(async (res) => {
          if (res.data.length) {
            this.payments = res.data;
            resolve(res.data);
          } else {
            reject(false);
          }
        }).catch((err) => {
          if (err.response) {
            console.log(err.response.data);
            console.log(err.response.status);
            console.log(err.response.headers);
          } else if (err.request) {
            console.log(err.request);
          } else {
            console.log("Error", err.message);
          }
          console.log(err.config);
          reject(new Error(err));
        });
      });
    }
  }
});
export { useInvoiceStore as u };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
