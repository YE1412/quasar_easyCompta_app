import { s as sessionAxiosService } from "./session.service.js";
import { i as i18n, P as Platform, a as Plugin } from "./index.js";
import { getPref, setPref } from "./index3.js";
import "./index4.js";
import "./index2.js";
const t = i18n.global.t;
async function validateSession(sessionCookie, platform, sessionPref = null) {
  if (platform.is.desktop)
    return sessionAxiosService.validate(!!sessionCookie ? sessionCookie.sessionId : "");
  else {
    if (!!sessionPref && !!sessionCookie && sessionPref.sessionId === sessionCookie.sessionId)
      return true;
    else
      return false;
  }
}
function hasNecessaryRoute(to, router) {
  let ret = false;
  ret = router.hasRoute(to.name);
  return ret;
}
async function routingForClient(store, cookie, from, to, router, platform) {
  let sessionCookie = null, userCookie = null;
  if (!!cookie.getAll().session) {
    sessionCookie = JSON.parse(decodeURIComponent(cookie.getAll().session));
  }
  if (!!cookie.getAll().user) {
    userCookie = JSON.parse(decodeURIComponent(cookie.getAll().user));
  }
  if (!!cookie.getAll().message) {
    JSON.parse(decodeURIComponent(cookie.getAll().message));
  }
  i18n.global.locale.value = !!sessionCookie && !!sessionCookie.langDisplayed ? sessionCookie.langDisplayed.nom : "en-US";
  const hasRoute = hasNecessaryRoute(to, router);
  const requireAuth = to.meta.requiresAuth;
  if (requireAuth && !!userCookie && !userCookie.connected) {
    return await validateSession(sessionCookie, platform).then(
      () => {
        if (!!userCookie.user && Object.keys(userCookie.user).length && Object.getPrototypeOf(userCookie.user) === Object.prototype) {
          store.user.connected = true;
          userCookie.connected = true;
          cookie.set("user", JSON.stringify(userCookie), { path: "/", sameSite: "Lax", secure: false });
          return null;
        } else {
          return t("startLinkTarget");
        }
      }
    ).catch(() => {
      if (!!store && Object.keys(store).length && Object.getPrototypeOf(store) === Object.prototype) {
        store.user.user = [];
        store.user.connected = false;
      }
      if (store.session && store.session.sessionId != "") {
        store.message.messages.push({
          severity: true,
          content: t("session.results.ko")
        });
        store.message.messagesVisibility = true;
      } else {
        if (!!store && Object.keys(store).length && Object.getPrototypeOf(store) === Object.prototype) {
          store.message.messages = [];
          store.message.messagesVisibility = false;
        }
      }
      return t("startLinkTarget");
    });
  } else if (hasRoute && to.fullPath !== "/") {
    if (to.fullPath === t("startLinkTarget")) {
      if (userCookie === null) {
        userCookie = {};
        userCookie.user = {};
      }
      userCookie.connected = false;
      cookie.set("user", JSON.stringify(userCookie), { path: "/", sameSite: "Lax", secure: false });
    }
    return null;
  } else if (userCookie === null || !Object.keys(userCookie.user).length && Object.getPrototypeOf(userCookie.user) === Object.prototype && hasRoute) {
    if (userCookie === null) {
      userCookie = {};
      userCookie.user = {};
    }
    userCookie.connected = false;
    cookie.set("user", JSON.stringify(userCookie), { path: "/", sameSite: "Lax", secure: false });
    return t("startLinkTarget");
  } else
    return null;
}
async function checkForWeb(to, from, next, router, cookie, platform, store = null) {
  let dest = null;
  {
    dest = await routingForClient(store, cookie, from, to, router, platform);
  }
  if (!!dest)
    next(dest);
  else
    next();
}
async function checkForMobiles(to, from, next, router, cookie, platform) {
  let sessionCookie = null, userCookie = null;
  if (!!cookie.getAll().session) {
    sessionCookie = JSON.parse(decodeURIComponent(cookie.getAll().session));
  }
  if (!!cookie.getAll().user) {
    userCookie = JSON.parse(decodeURIComponent(cookie.getAll().user));
  }
  i18n.global.locale.value = !!sessionCookie && !!sessionCookie.langDisplayed ? sessionCookie.langDisplayed.nom : "en-US";
  const hasRoute = hasNecessaryRoute(to, router);
  const requireAuth = to.meta.requiresAuth;
  if (requireAuth && !!userCookie && !userCookie.connected) {
    const sessionPref = await getPref("session");
    const res = await validateSession(sessionCookie, platform, sessionPref);
    if (res) {
      console.log("Session validated !");
      if (!!userCookie.user && Object.keys(userCookie.user).length && Object.getPrototypeOf(userCookie.user) === Object.prototype) {
        userCookie.connected = true;
        await setPref("user", userCookie);
        next();
      } else {
        await setPref("message", {
          messages: [
            {
              severity: true,
              content: t("session.results.ko")
            }
          ],
          messagesVisibility: true
        });
        next(t("startLinkTarget"));
      }
    } else {
      console.log("Session unvalidated !");
      await setPref("user", { connected: false, user: {} });
      if (sessionCookie && sessionCookie.sessionId !== "") {
        await setPref("message", {
          messages: [
            {
              severity: true,
              content: t("session.results.ko")
            }
          ],
          messagesVisibility: true
        });
      } else {
        await setPref("message", {
          messages: [],
          messagesVisibility: false
        });
      }
      next(t("startLinkTarget"));
    }
  } else if (hasRoute && to.fullPath !== "/") {
    next();
  } else if (userCookie === null && hasRoute) {
    next(t("startLinkTarget"));
  } else
    next();
}
var auth = ({ store, router, ssrContext }) => {
  const platform = Platform;
  const cookies = Plugin;
  router.beforeEach(async (to, from, next) => {
    if (platform.is.desktop) {
      await checkForWeb(to, from, next, router, cookies, platform, store.state.value);
    } else {
      await checkForMobiles(to, from, next, router, cookies, platform);
    }
  });
};
export { auth as default };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
